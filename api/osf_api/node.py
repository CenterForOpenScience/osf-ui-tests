import json

import requests

from . import exceptions
from . import endpoints
from .common import ApiKey


class OsfNode(object):
    def __init__(self, http_auth=None):
        self.http_auth = http_auth
        self._call_api()

    def __getattr__(self, item):
        try:
            return self._api_summary[item]
        except KeyError:
            raise AttributeError

    @property
    def id(self):
        return self._api_summary['pid']

    @property
    def log(self):
        if not self._log:
            r = requests.get(
                self._log_endpoint,
                auth=self.http_auth
            )

            exceptions.assert_auth_passed(r)

            self._log = json.loads(r.content)

        return self._log

    @property
    def title(self):
        return self._api_summary['title']

    @title.setter
    def title(self, value):
        r = requests.post(
            self._edit_endpoint,
            auth=self.http_auth,
            data={
                'name': 'title',
                'value': value,
            },
        )

        exceptions.assert_auth_passed(r)

        self._call_api()

    @property
    def url(self):
        return endpoints.root + self._api_summary['purl']

    @property
    def api_keys(self):
        try:
            return self._api_keys
        except AttributeError:
            self._call_api_keys()
            return self._api_keys

    def add_api_key(self, label=None):
        r = requests.post(
            self._add_api_key_endpoint,
            auth=self.http_auth,
            data={'label': label or 'Generated by osf_api'}
        )

        exceptions.assert_auth_passed(r)

        self._call_api_keys()
        return self.api_keys[-1]

    def _call_api(self):
        r = requests.get(
            self._get_endpoint,
            auth=self.http_auth,
        )

        exceptions.assert_auth_passed(r)

        self._api_summary = json.loads(r.content)['summary']

    def _call_api_keys(self):
        r = requests.get(
            self._get_api_keys_endpoint,
            auth=self.http_auth,
        )

        exceptions.assert_auth_passed(r)

        self._api_keys = [
            ApiKey(
                label=x.get('label'),
                key=x.get('key'),
            )
            for x
            in json.loads(r.content).get('keys', [])
        ]


class OsfProject(OsfNode):

    def __init__(self, project_id, parent_id=None, *args, **kwargs):
        self.parent_id = parent_id

        # TODO: This should be a lazy list of components, not a dict.
        self.components = dict()

        self._edit_endpoint = endpoints.edit_project(project_id)
        self._get_endpoint = endpoints.get_project(project_id, self.parent_id)
        self._get_api_keys_endpoint = endpoints.get_project_api_keys(
            project_id=project_id,
            parent_id=self.parent_id,
        )
        self._add_api_key_endpoint = endpoints.add_project_api_key(
            project_id=project_id,
            parent_id=self.parent_id,
        )

        super(OsfProject, self).__init__(*args, **kwargs)

        # Make sure this isn't a registration
        if self._api_summary['registered_date']:
            raise KeyError('Project {} is a registration'.format(project_id))


class OsfComponent(OsfNode):
    def __init__(self, parent_id, component_id, *args, **kwargs):
        self.parent_id = parent_id

        self._edit_endpoint = endpoints.edit_component(
            component_id=component_id,
            project_id=parent_id,
        )

        self._get_endpoint = endpoints.get_component(
            component_id=component_id,
            parent_id=parent_id,
        )

        self._get_api_keys_endpoint = endpoints.get_component_api_keys(
            component_id=component_id,
            parent_id=parent_id,
        )

        self._add_api_key_endpoint = endpoints.add_component_api_key(
            component_id=component_id,
            parent_id=self.parent_id,
        )

        super(OsfComponent, self).__init__(*args, **kwargs)